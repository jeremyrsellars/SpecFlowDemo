// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace HL7v2Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Graceful MSH-parsing")]
    public partial class GracefulMSH_ParsingFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "MSHParsingFeature.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Graceful MSH-parsing", @"In order to gracefully handle HL7v2 messages with an MSH that is not quite up to the HL7v2 spec
As a troubleshooter who doesn't care about whether the message actually matches the spec
I want to see the parts of message as if it was correctly specified - it should fail gracefully,
So that I can see a better representation of the message than the raw text.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("MSH may be absent altogether")]
        public virtual void MSHMayBeAbsentAltogether()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("MSH may be absent altogether", ((string[])(null)));
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
  testRunner.Given("The message: \"FIN|1|2|3|4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
  testRunner.Then("Should be interpreted as MSH|^~\\&\\|", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Access to Financial messages must be audited")]
        public virtual void AccessToFinancialMessagesMustBeAudited()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access to Financial messages must be audited", ((string[])(null)));
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
  testRunner.Given("Joan accessed a message containing \"FIN|1|2|mrn-goes-here|4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
  testRunner.Then("There should be a related audit record", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 15
  testRunner.And("The a record should say Joan did it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
  testRunner.And("The record should be attached to patient mrn-goes-here", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
  testRunner.And("The audit record should be timestamped with the current time.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("MSH2 may be incomplete")]
        [NUnit.Framework.TestCaseAttribute("MSH|^~\\&|", "MSH|^~\\&|", "valid", "fully-specified", null)]
        [NUnit.Framework.TestCaseAttribute("MSH|^~\\|", "MSH|^~\\&|", "valid", "everything is optional", null)]
        [NUnit.Framework.TestCaseAttribute("MSH|^~|", "MSH|^~\\&|", "valid", "everything is optional", null)]
        [NUnit.Framework.TestCaseAttribute("MSH|^|", "MSH|^~\\&|", "valid", "everything is optional", null)]
        [NUnit.Framework.TestCaseAttribute("MSH||", "MSH|^~\\&|", "valid", "everything is optional", null)]
        [NUnit.Framework.TestCaseAttribute("MSH|", "MSH|^~\\&|", "valid", "everything is optional", null)]
        [NUnit.Framework.TestCaseAttribute("MSH", "MSH|^~\\&|", "valid", "everything is optional", null)]
        [NUnit.Framework.TestCaseAttribute("MSH?^~\\&?", "MSH?^~\\&?", "valid", "fully-specified", null)]
        [NUnit.Framework.TestCaseAttribute("MSH?^~\\?", "MSH?^~\\&?", "valid", "everything is optional", null)]
        [NUnit.Framework.TestCaseAttribute("MSH?^~?", "MSH?^~\\&?", "valid", "everything is optional", null)]
        [NUnit.Framework.TestCaseAttribute("MSH?^?", "MSH?^~\\&?", "valid", "everything is optional", null)]
        [NUnit.Framework.TestCaseAttribute("MSH??", "MSH?^~\\&?", "valid", "MSH.2 is empty", null)]
        [NUnit.Framework.TestCaseAttribute("MSH?????", "MSH?^~\\&?", "valid", "MSH.2 is empty", null)]
        [NUnit.Framework.TestCaseAttribute("MSH?", "MSH?^~\\&?", "valid", "everything is optional", null)]
        [NUnit.Framework.TestCaseAttribute("MSH?^^?", "MSH?^^\\&?", "invalid", "component separator may not equal field repeat separator", null)]
        [NUnit.Framework.TestCaseAttribute("MSH?^~~?", "MSH?^~~&?", "invalid", "field repeat separator may not equal escape separator", null)]
        [NUnit.Framework.TestCaseAttribute("MSH?^~\\~?", "MSH?^~\\~?", "invalid", "field repeat separator may not equal subcomponent separator", null)]
        [NUnit.Framework.TestCaseAttribute("MSH$", "MSH$^~\\&$", "valid", "", null)]
        public virtual void MSH2MayBeIncomplete(string actualMSH, string interpretedMSH, string validity, string reason, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("MSH2 may be incomplete", exampleTags);
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
  testRunner.Given(string.Format("A message starting with {0}", actualMSH), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
  testRunner.Then(string.Format("Should be interpreted as {0}", interpretedMSH), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 22
  testRunner.And(string.Format("Should be {0} because {1}", validity, reason), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
